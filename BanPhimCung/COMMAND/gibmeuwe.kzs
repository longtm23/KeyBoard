using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO.Ports;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace BanPhimCung.Command
{
    public class MRW_SerialPort
    {
        WriteLog log = new WriteLog();
        private string comName = "";

        private bool isSended = false;

        public enum Status
        {
            Opened,
            Closed,
            Opening,
            Closing,
            CloseError,
            OpenError,
            SendError,
            ReceivedEror
        }

        private SerialPort serialPort = null;

        //public delegate void StatusEventHandler(SerialPort serialPort, Status status);

        public delegate void ReceivedEventHandler(byte[] data);

        public event ReceivedEventHandler DataReceived;

        private Queue<byte[]> sendQueue = null;
        private BackgroundWorker comSendWorker;
        private readonly Mutex mQueue = new Mutex();
        public MRW_SerialPort()
        {
            Init();
        }

        public MRW_SerialPort(string comName)
        {
            Init();
            this.serialPort = new SerialPort(comName, 19200);
            serialPort.DataReceived += serialPortReceived;
            serialPort.ReadTimeout = 2000;
            serialPort.WriteTimeout = 1000;
            openPort();
        }

        public void Init()
        {
            sendQueue = new Queue<byte[]>();
            comSendWorker = new BackgroundWorker();
            comSendWorker.WorkerSupportsCancellation = true;
            comSendWorker.DoWork += comSendWorker_DoWork;
            comSendWorker.RunWorkerAsync();

        }

        private void readRunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            log.sendLog("Woker read com run completed");
        }
        
        public void serialPortReceived(object sender, SerialDataReceivedEventArgs e)
        {
            Console.WriteLine("Vao nhan data break");
            var byteRes = ReadByteInPort(false);
            DataReceived(byteRes);
        }
        private byte[] ReadByteInPort(bool isReturnSend)
        {
            byte[] r = null;
            try
            {
                r = new byte[serialPort.BytesToRead];
                serialPort.Read(r, 0, serialPort.BytesToRead);
            }
            catch (TimeoutException ex)
            {
                log.sendLog("Exception read byte in port: " + ex.ToString());
            }
            catch (Exception ex)
            {
                log.sendLog("Exception read byte in port: " + ex.ToString());
            }
            finally
            {
                if (isReturnSend)
                {
                    isSended = false;
                }

                if (serialPort != null && serialPort.IsOpen && serialPort.BytesToRead != 0) serialPort.DiscardInBuffer();
            }

            return r;
        }

        private void waitForResult()
        {
            double WaitTimeout = 100 + DateTime.Now.TimeOfDay.TotalMilliseconds;
            while (!(DateTime.Now.TimeOfDay.TotalMilliseconds >= WaitTimeout) && isSended)
            {
                int BytesToRead = 0;
                try{
                  BytesToRead = serialPort.BytesToRead;
                }catch{}
                if (BytesToRead > 0)
                {
                    isSended = false;
                    return;
                }
                Thread.Sleep(20);
               
            }
            isSended = false;
            return;
        }

        public string[] PortName { get { return SerialPort.GetPortNames(); } }
        public bool openPort()
        {
            if (!serialPort.IsOpen)
            {
                try
                {
                    log.sendLog("opening Port " + comName);
                    serialPort.Open();
                    log.sendLog("opened Port" + comName);
                    return true;
                }
                catch (Exception e)
                {
                    log.sendLog("Open port: " + e);
                    return false;
                }
            }
            return true;
        }

        public void SendData(byte[] data)
        {
           
            mQueue.WaitOne();
            sendQueue.Enqueue(data);
            mQueue.ReleaseMutex();

            if (!comSendWorker.IsBusy)
            {
                comSendWorker.RunWorkerAsync();
            }
        }

        private bool checkMQueue()
        {
            bool isCheck = false;
            mQueue.WaitOne();
            if (sendQueue != null && sendQueue.Count() > 0)
            {
                isCheck = true;
            }
            mQueue.ReleaseMutex();
            return isCheck;

        }

        private void comSendWorker_DoWork(object sender, DoWorkEventArgs e)
        {
            while (!comSendWorker.CancellationPending && checkMQueue())
            {
                if (!isSended)
                {
                    mQueue.WaitOne();
                    var data = sendQueue.Dequeue();
                    mQueue.ReleaseMutex();
                    Console.WriteLine("BYTE SEND: ");
                    foreach (var a in data)
                    {
                        Console.Write(a + ", ");
                    }
                    Console.WriteLine("");

                    SendDataToKeyBoard(data);
                    waitForResult();
                }
            }
        }
        
        private void SendDataToKeyBoard(byte[] data){
            if (openPort())
            {
                try
                {
                    isSended = true;
                    serialPort.Write(data, 0, data.Length);
                }
                catch (Exception ex)
                {
                    isSended = false;
                    Console.WriteLine(ex.Message);
                }
            }
        }

        //private void comReadWorker_DoWork(object sender, DoWorkEventArgs e)
        //{
        //    while (!comReadByteWorker.CancellationPending)
        //    {
        //        DataReceived(ReadByteInPort());
        //    }
        //}
    }
}
